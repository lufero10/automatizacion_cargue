"""
===========================================
 PLANTILLA DE REGLAS Y CONVERSIONES
 Autor: Luigi Reds
 Descripci√≥n:
     Este m√≥dulo define la estructura base para aplicar
     conversiones y validaciones a un DataFrame antes
     del cargue en una geodatabase.

 Uso:
     1Ô∏è‚É£ Copia este archivo y ren√≥mbralo seg√∫n la tem√°tica (ej: dcvg_reglas.py).
     2Ô∏è‚É£ Implementa la l√≥gica en las funciones aplicar_conversiones() y validar_datos().
     3Ô∏è‚É£ Importa y ejecuta estas funciones desde tu flujo principal.

===========================================
"""

import pandas as pd
import numpy as np

# =========================================================
# üîÅ CONVERSIONES ESPEC√çFICAS POR TEM√ÅTICA
# =========================================================
def aplicar_conversiones(df: pd.DataFrame) -> pd.DataFrame:
    """
    Aplica conversiones espec√≠ficas de la tem√°tica.

    Ejemplo de uso:
        df = aplicar_conversiones(df)

    Par√°metros:
        df (DataFrame): Datos cargados desde Excel o CSV.

    Retorna:
        DataFrame con los nuevos campos o valores convertidos.
    """

    # üß© Ejemplo: Calcular rango m√≠nimo/m√°ximo de ENGM
    if "ENGM" in df.columns:
        df["ENGFROMM"] = df["ENGM"].min()
        df["ENGTOM"] = df["ENGM"].max()

    # üß© Ejemplo: Convertir fecha de inspecci√≥n
    if "Fecha_de_Inspecci√≥n" in df.columns:
        fechas = pd.to_datetime(df["Fecha_de_Inspecci√≥n"], errors="coerce")
        df["INSPECTIONSTARTDATE"] = fechas.min()
        df["INSPECTIONENDDATE"] = fechas.max()

    # ‚öôÔ∏è Agrega aqu√≠ tus conversiones personalizadas...
    # --------------------------------------------------
    # if "Campo1" in df.columns:
    #     df["NuevoCampo"] = df["Campo1"].apply(lambda x: alguna_funcion(x))

    return df


# =========================================================
# ‚úÖ VALIDACIONES DE REGLAS DE NEGOCIO
# =========================================================
def validar_datos(df: pd.DataFrame) -> list:
    """
    Realiza validaciones de negocio sobre los datos.

    Ejemplo de uso:
        errores = validar_datos(df)
        if errores:
            for e in errores: print("‚ùå", e)

    Par√°metros:
        df (DataFrame): Datos ya convertidos.

    Retorna:
        Lista de errores detectados.
    """

    errores = []

    # üîç Ejemplo: Campos obligatorios
    if "ENGROUTEID" in df.columns and df["ENGROUTEID"].isnull().any():
        errores.append("Existen registros sin ENGROUTEID.")

    # üîç Ejemplo: Campos que no deben ser negativos
    for campo in ["ENGFROMM", "ENGTOM"]:
        if campo in df.columns and (df[campo] < 0).any():
            errores.append(f"El campo {campo} contiene valores negativos.")

    # üîç Ejemplo: Validaci√≥n personalizada
    # if "TIPO_EVENTO" in df.columns and "ESPESOR" in df.columns:
    #     mask = (df["TIPO_EVENTO"] == "P√©rdida de metal") & (df["ESPESOR"].isnull())
    #     if mask.any():
    #         errores.append("Los registros con 'P√©rdida de metal' deben tener ESPESOR.")

    if not errores:
        print("‚úÖ Validaciones completadas: sin errores detectados.")
    else:
        print(f"‚ö†Ô∏è Se detectaron {len(errores)} error(es):")
        for e in errores:
            print("   -", e)

    return errores


# =========================================================
# üß© FUNCIONES AUXILIARES OPCIONALES
# =========================================================
def normalizar_texto(df: pd.DataFrame, columnas: list) -> pd.DataFrame:
    """Convierte a may√∫sculas y limpia espacios en columnas de texto."""
    for col in columnas:
        if col in df.columns:
            df[col] = df[col].astype(str).str.strip().str.upper()
    return df


def reemplazar_valores(df: pd.DataFrame, columna: str, mapa: dict) -> pd.DataFrame:
    """Reemplaza valores en una columna seg√∫n un diccionario de mapeo."""
    if columna in df.columns:
        df[columna] = df[columna].replace(mapa)
    return df
